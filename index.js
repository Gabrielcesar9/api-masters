const express = require('express');
const nj = require('numjs')
const cors = require('cors')
const bodyParser = require('body-parser')
const jsonParser = bodyParser.json()
const app = express();
const port = process.env.PORT || 3000;

app.use(cors({}))
app.use((req, res, next) => {
    res.header('Access-Control-Allow-Origin', '*');
    next();
  });


app.get('/',(req,res)=>{
    return res.json('Hello World')
})
app.post('/compute',jsonParser, (req, res) => {
    console.log('an incoming request')
    console.log(req.body.data)
    function relu(array){
        const x = array.selection.data
        let v = []
        for (let i = 0; i< x.length; i++){
            if(x[i]<0){
                v.push(0)
            }else{
                v.push(x[i])
            }
        }
    return nj.array(v)
        }   
    function softmax(array) {
    const arr = array.selection.data
    const expArr = arr.map(x => Math.exp(x));
    const sumExp = expArr.reduce((acc, val) => acc + val, 0);
    return nj.array(expArr.map(x => x / sumExp));
    }   

    const utr = req.body.data
    const COUNT_A = utr.atoms
    const Ahf = nj.array([-0.4993343, -7.4324257, -14.5723798, -24.5305738, -37.6877633, -54.3931834, -74.7966008, -99.3810918, -161.8530707, -199.6083389, -241.874158, -288.8509362, -340.7099574, -397.49874, -459.4727811, -2572.3707797])
    const AQci = nj.array([-0.4993343, -7.4324257, -14.6169075, -24.5911252, -37.764881, -54.4870115, -74.925731, -99.5502035, -161.8530707, -199.6412673, -241.9227443, -288.9183398, -340.7966949, -397.6105804, -459.6122531, -2572.5002195])
    const ADz = nj.array([-0.4993343, -7.4324257, -14.5981502, -24.5676436, -37.7414646, -54.4681736, -74.906967, -99.5356991, -161.8530707, -199.6299162, -241.9051571, -288.8974701, -340.7768833, -397.5886211, -459.5921497, -2572.4843204])
    const ATz = nj.array([-0.4998212, -7.4327053, -14.6011854, -24.5765767, -37.7595607, -54.4986473, -74.9592941, -99.6121061, -161.858038, -199.6370122, -241.9152723, -288.913275, -340.800759, -397.6283261, -459.6473317, -2572.6466854])

    const Alarge = nj.subtract(ATz,ADz)
    const Mlarge = utr.MP2tz - utr.MP2dz
    const DHO = nj.array([51.63, 37.69, 76.48, 136.2, 169.98, 112.53, 58.99, 18.47, 25.69, 34.87, 78.23, 106.6, 75.42, 65.66, 28.59, 28.2])
    const DHT = nj.array([1.01, 1.1, 0.46, 0.29, 0.25, 1.04, 1.04, 1.05, 1.54, 1.19, 1.08, 0.76, 1.28, 1.05, 1.1, 0.0])
    const SO = nj.array([0.0, 0.0, 0.0, -5e-05, -0.00014, 0.0, -0.00036, -0.00061, 0.0, 0.0, -0.00034, -0.00068, 0.0, -0.00089, -0.00134, -0.0056])
    const Atotal = nj.array([-0.4998212, -7.4327053, -14.619942700000001, -24.6000583, -37.782977100000004, -54.517485199999996, -74.97805810000001, -99.6266105, -161.858038, -199.6483633, -241.9328595, -288.9341447, -340.82057060000005, -397.6502854, -459.6674351, -2572.6625845000003])
    const Em = utr.HF + utr.QCISDT - utr.HF + utr.MP2tz - utr.MP2dz + utr.ZPE
    const Ea = nj.dot(nj.array(COUNT_A), Atotal)

    let proc = COUNT_A.concat([
                            utr.QCISDT - utr.HF,
                            utr.QCISDT - Em,
                            utr.HF - Em,
                            utr.MP2tz - utr.MP2dz,
                            Ea.selection.data - utr.QCISDT,
                            Ea.selection.data - utr.HF,
                            Ea.selection.data-Em,
                            utr.Corr - utr.ZPE,
                            nj.dot(nj.array(COUNT_A),SO).selection.data[0],
                            nj.dot(nj.array(COUNT_A),Alarge).selection.data[0] - Mlarge,
                            nj.dot(nj.array(COUNT_A),AQci).selection.data[0] - utr.QCISDT,
                            nj.dot(nj.array(COUNT_A),DHO).selection.data[0],
                            nj.dot(nj.array(COUNT_A),DHT).selection.data[0],
                        ])

    console.log('proc',proc)

    //let test = nj.array([0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 0, -0.9336541999999781, 0.38020419999986643, 1.3138583999998446, -0.3928951999999981, 0.4891216999999415, -0.44453250000003663, 0.8693258999998079, 0.005901000000000002, -0.00312, 0.07146230000000742, 0.8105545999999322, 180.48, 4.96])
    let means = nj.array([3.975806451612903, 0.020161290322580645, 0.008064516129032258, 0.008064516129032258, 2.274193548387097, 0.1975806451612903, 0.43951612903225806, 0.38306451612903225, 0.020161290322580645, 0.004032258064516129, 0.020161290322580645, 0.056451612903225805, 0.05241935483870968, 0.125, 0.31048387096774194, 0.056451612903225805, -0.6644704806451621, 0.13249338387094572, 0.7969638645161077, -0.19167595645160673, 0.959864351209653, 0.29539387056449057, 1.0923577350805986, 0.005524508064516123, -0.0015993548387096767, 0.05645704999998567, 1.095083257661282, 680.4325, 6.317540322580627])
    let stds = nj.array([3.8394465950299934, 0.16679127322537463, 0.08943981053556, 0.08943981053555948, 2.1880861783369845, 0.4807527212405861, 0.7595965130535285, 1.1009689115614274, 0.16679127322537474, 0.06337190986089386, 0.16679127322537537, 0.2634271446945334, 0.32576552761185296, 0.37634168586024197, 0.8778013726008058, 0.27831345043124794, 0.349631756572766, 0.11330042190328553, 0.43101223023238383, 0.11406213837968654, 0.7986972640302247, 0.6390641507425407, 0.78982079346767, 0.0018173275265192664, 0.001959600330356845, 0.0338519301126583, 0.8082911848443521, 510.21349050781606, 3.62329815423781])
    let test = proc
    /*const normalized = [-1.0355154976655807, -0.12087736925743083, -0.09016696346674305, -0.09016696346674356, -1.0393528238981689, -0.4109818549782348, -0.5786178865743233, 3.2852294428017235, -0.12087736925743076, -0.06362847629757791, -0.12087736925743028, 3.5818191332973695, -0.16091130090709574, -0.3321449754211388, -0.3537062946801058, -0.2028346557299109, -0.7699063780517688, 2.1863185676428403, 1.1992572350094308, -1.7641195089520323, -0.5911113460578408, -1.158975238787011, -0.2842933073262328, 0.20716790451359895, 0.7451626888894158, 0.7507227633338239, -0.7759976040693015, 0.4432612837756867, -0.3520125704651099, -0.9798888294827264, -0.3746697800711895]*/
    let normalized = nj.divide(nj.subtract(test,means),stds)
    const W1 = nj.array([[0.45956847071647644, -0.15561968088150024, 0.029678743332624435, 0.3381296396255493, 0.09627076983451843, 0.11440439522266388, 0.3796168863773346, 0.3902803063392639], [-0.4983903467655182, 0.1551320105791092, -0.3786262273788452, 0.2723786532878876, 0.6210681200027466, -0.580041229724884, -0.30434295535087585, -0.9116156101226807], [0.06254859268665314, -0.4755758047103882, 0.06335769593715668, -0.10109739750623703, 0.03970504179596901, -0.5493882298469543, -0.08643324673175812, -0.8755333423614502], [0.4653530418872833, -0.5045222043991089, 0.1965569108724594, 0.24257591366767883, -0.07170283794403076, 0.1785762459039688, -0.10336315631866455, -1.096950888633728], [-0.009709267877042294, 0.12236488610506058, -0.17721521854400635, 0.011447443626821041, -0.24455653131008148, 0.8400163650512695, -0.30028003454208374, 0.26122477650642395], [-0.03129216283559799, 0.4596864879131317, -0.8091103434562683, -0.6383132338523865, 0.23304107785224915, 0.5446303486824036, -0.3412129580974579, -0.6349192261695862], [0.36422696709632874, 0.35731491446495056, -0.14537902176380157, -0.49770811200141907, -0.1434818059206009, -0.2559347450733185, -0.6839566826820374, 0.32871919870376587], [0.1267474889755249, -0.6111301779747009, -0.07234162837266922, 0.06504982709884644, -0.21855813264846802, -0.5483482480049133, 0.1472448706626892, -0.8351237177848816], [-0.4939936101436615, -0.4976682960987091, 0.5334731340408325, -0.16581013798713684, 0.3763916492462158, -0.437944620847702, -0.268973708152771, -1.1043436527252197], [-0.1680484414100647, -0.3876904249191284, -0.19279028475284576, -0.22347435355186462, 0.25974467396736145, 0.19364482164382935, 0.21648764610290527, -1.0119472742080688], [-0.5157631039619446, 0.27617746591567993, 0.10876330733299255, -0.24463945627212524, 0.3171095550060272, -0.5800837874412537, 0.6893575191497803, -0.25361907482147217], [-0.5726155042648315, 0.039141297340393066, -0.6031872630119324, -0.3088397681713104, -0.08317861706018448, -0.2796460688114166, -0.16101863980293274, -1.1512948274612427], [-0.10716589540243149, -0.14545492827892303, -0.24431735277175903, -0.5638071894645691, 0.41734960675239563, -0.551419198513031, -0.5419002175331116, 0.7452661991119385], [-0.0753689780831337, -0.06425885856151581, -0.0911492109298706, -0.5387214422225952, 0.11850779503583908, -0.7493894100189209, -0.24427835643291473, 0.005183381028473377], [-0.026903046295046806, 0.6164767742156982, 0.19596324861049652, 0.014818689785897732, -0.24518445134162903, -0.6780946850776672, 0.18873509764671326, 0.28557565808296204], [-0.5848953723907471, -0.2245141863822937, 0.22763235867023468, 0.4548261761665344, 0.37983042001724243, -0.5053369402885437, -0.4647692143917084, 0.3547329306602478], [-0.2883341610431671, 0.38516372442245483, -0.19980333745479584, 0.17431919276714325, -0.0002116612158715725, 0.26316511631011963, -0.34019914269447327, -0.036242738366127014], [-0.4494103789329529, -0.06533713638782501, 0.104799285531044, -0.2360256314277649, -0.014606170356273651, -0.2661186754703522, 0.23280051350593567, -0.5147757530212402], [0.17189949750900269, 0.04111340641975403, -0.21352659165859222, -0.08969612419605255, -0.3041031062602997, -0.4651731550693512, -0.05836864933371544, -0.48276543617248535], [0.29555419087409973, 0.07280351966619492, -0.2821924388408661, -0.20202898979187012, 0.2271646410226822, 0.5177510976791382, 0.26359692215919495, 0.3797324001789093], [-0.2495158612728119, -0.2041153758764267, 0.273184210062027, -0.48182639479637146, 0.2221498042345047, 0.2535127103328705, -0.29763153195381165, 0.44418877363204956], [-0.050532907247543335, 0.22327162325382233, 0.18876111507415771, -0.38100701570510864, -0.08331352472305298, 0.40689617395401, -0.28115442395210266, 0.15711040794849396], [-0.09942784905433655, -0.300846666097641, 0.11234262585639954, -0.4748202860355377, -0.2130531668663025, 0.41684597730636597, 0.04803725332021713, 0.05354505404829979], [-0.08608504384756088, 0.12397874891757965, -0.176999032497406, 0.2537730932235718, 0.36976808309555054, -0.40313249826431274, 0.18646512925624847, 0.18154174089431763], [-0.3036782145500183, -0.17931914329528809, 0.039775557816028595, -0.09754808992147446, 0.4190211594104767, 0.21657823026180267, -0.3657013773918152, -0.35197821259498596], [-0.5941224694252014, -0.7259185314178467, -0.4903195798397064, -0.6137946248054504, 0.5773037672042847, 0.48156341910362244, -0.29357096552848816, -0.06580507010221481], [0.06810519844293594, 0.17154143750667572, 0.5676043629646301, 0.20042164623737335, -0.25687265396118164, 0.3190578818321228, 0.1618133932352066, 0.5228668451309204], [0.35885554552078247, 0.21444284915924072, -0.09150900691747665, -0.42043671011924744, 0.4336165189743042, 0.5559942126274109, -0.17339769005775452, 0.02143118530511856], [0.17200593650341034, -0.022760597988963127, 0.5096515417098999, 0.4088275730609894, 0.22400683164596558, -0.5645065903663635, -0.19622685015201569, 0.3432127833366394]])
    const W2 = nj.array([[0.09351678937673569, 0.9241592288017273, 0.34610670804977417, -0.26283934712409973, 0.3813806176185608, 0.2781533896923065, -0.32600393891334534, -0.6230317950248718], [0.5087213516235352, 0.6476766467094421, 0.4686315059661865, 0.046509068459272385, 0.5137444138526917, 0.13352328538894653, 0.6635060906410217, -0.02608529105782509], [-0.13222375512123108, 0.6721550822257996, 0.8388413190841675, -0.2487870752811432, 0.15279430150985718, -0.2975567579269409, 0.6011190414428711, -0.6804007887840271], [0.7497332692146301, 0.19702625274658203, -0.6122245192527771, -0.5666181445121765, 0.7428715825080872, 0.7690192461013794, 0.763643741607666, 0.5061870217323303], [0.5387802720069885, -0.45119789242744446, -0.9768249988555908, 0.987744927406311, 0.7671012282371521, 0.6525560617446899, 0.417299747467041, 0.29680272936820984], [-0.43504637479782104, -0.3549102246761322, -0.10038919746875763, 0.31239262223243713, -0.8630319833755493, -0.7965635657310486, -0.6852360963821411, 1.168135166168213], [0.5925889611244202, -0.3345102071762085, 0.5822775959968567, -0.07959084957838058, 0.4228348731994629, 0.06438324600458145, 0.6815693378448486, -0.4888475835323334], [-0.4143362045288086, 0.3649618923664093, 0.45694079995155334, 0.7030203342437744, -0.194098562002182, -1.2285029888153076, -0.4359028935432434, 0.4536190330982208]]    )
    const b2 = nj.array([-0.3666602671146393, 0.39441820979118347, 0.29752296209335327, 0.43668332695961, -0.3591322898864746, -0.10820673406124115, 0.13561037182807922, 0.5791586637496948])
    const W3 = nj.array([[-0.06340132653713226, 0.5313214659690857, -0.779412567615509, -0.6466876864433289], [0.7979274392127991, -0.9835773706436157, 1.1168674230575562, -0.8208535313606262], [0.34050706028938293, -1.140920639038086, 0.254475861787796, -0.7075663805007935], [-1.038054347038269, 0.10199251770973206, 0.5830330848693848, 0.7299027442932129], [0.5757882595062256, 0.9194298386573792, -0.7300969362258911, -0.2257264107465744], [-0.8760639429092407, 0.5652467012405396, -1.6212170124053955, -0.4051077961921692], [0.545848548412323, 0.6897009611129761, 0.44314607977867126, -1.0393764972686768], [-0.9533555507659912, -0.22411967813968658, -0.0815272182226181, 1.2380143404006958]]    )
    const b3 = nj.array([-0.23989857733249664, -0.5274640917778015, 0.3633877635002136, 0.19259731471538544])
    const pred = softmax(nj.add(nj.dot(relu(nj.add(nj.dot(relu(nj.dot(normalized, W1)),W2),b2)),W3),b3))
    const params = [[1.000365030012007, 1.0420634725794462, 1.0488985709236276, 1.0009218655310141],
    [0.96349475747424, 0.9828101841375543, 1.3400263403978623, 1.3126114794011179],
    [0.9710644334665336, 1.0262620834474347, 1.2898568059249658, 1.204946815769015],
    [0.8309034701129964, 0.9757137001472826, 1.3900846598609529, 1.2106608144744921]]
    const ave = []
    for(let i=0; i<4; i++){
        let arr = 0
        for(let k=0; k<4; k++){
            arr += pred.tolist()[k]*params[k][i]
        }
        ave.push(arr)
    }
    console.log(pred.tolist())
    console.log('ave',ave)
    const [a,b,c,d] = ave
    
    const ea = parseFloat(nj.dot(COUNT_A, nj.add(Ahf, nj.add(nj.multiply(nj.subtract(AQci,Ahf),a), nj.multiply(nj.subtract(ATz,ADz),c)))).selection.data[0])
    const em = nj.add(nj.add(utr.HF,nj.multiply(nj.subtract(utr.QCISDT,utr.HF),b)), nj.multiply(nj.subtract(utr.MP2tz,utr.MP2dz),d)).selection.data[0]
    const dh0 = nj.dot(COUNT_A, DHO).selection.data[0]
    const dht = nj.dot(COUNT_A, DHT).selection.data[0]
    const enthalpy = dh0 - (ea - (em + utr.ZPE))*627.5095
    const D298 = enthalpy + (utr.Corr - utr.ZPE)*627.5095 - dht
    console.log(ea, em, dh0, dht, enthalpy, D298)
    res.send({parameters:ave, mol_eng:em, atomization:(ea - (em + utr.ZPE))*627.5095, enthalpy0:enthalpy, enthalpy298:D298})
});

app.options('/compute', cors({
    
    origin:'https://compositeann.vercel.app',
    methods:['GET','PUT','POST','DELETE','OPTIONS'],
    credentials:true,
    allowedHeaders:['Accept', 'Accept-Language', 'Content-Language', 'Content-Type']

}))

// Start the server
app.listen(port, () => {
  console.log(`Server is listening at http://localhost:${port}`);
});